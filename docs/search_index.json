[["index.html", "microeco tutorial Chapter 1 Background", " microeco tutorial Chi Liu, Minjie Yao 2021-07-27 Chapter 1 Background R language (R Core Team 2016) and its packages ecosystem are wonderful tools for data analysis. In microbial community ecology field, many packages can be used for the data analysis, such as vegan(Oksanen et al. 2019), ape(Paradis and Schliep 2018) and picante(Kembel et al. 2010). However, with the development of the high-throughput sequencing techniques, the increasing data amount and complexity make the data analysis a challenge. There have been some R packages created for the community data analysis in microbial ecology, such as phyloseq(Mcmurdie and Holmes 2013), microbiome (https://github.com/microbiome/microbiome), microbiomeSeq (http://www.github.com/umerijaz/microbiomeSeq), ampvis2 (https://madsalbertsen.github.io/ampvis2/reference/index.html), MicrobiomeR(https://github.com/vallenderlab/MicrobiomeR), theseus(Price et al. 2018), rANOMALY(Theil and Rifa 2021) and so on. However, we lack a flexible, comprehensive and modularized R package to analyze and manage the data. So we create the microeco R package(Liu et al. 2021) for this goal (https://github.com/ChiLiubio/microeco). References "],["intro.html", "Chapter 2 Introduction 2.1 Main Features 2.2 R6 Class", " Chapter 2 Introduction The microeco package has several advantages compared to other packages in R. The main goal of developing this package is to help users analyse communtiy ecology data fast. So a series of commonly-used approaches are implemented. Some new methods are still in active development. To accelerate the data mining, the whole structure of microeco package are modularized to make users conveniently remember, search and use. 2.1 Main Features R6 Class; fast, flexible and modularized Taxa abundance plotting Venn diagram Alpha diversity Beta diversity Differential abundance analysis Environmental data analysis Null model analysis Network analysis Functional analysis 2.2 R6 Class All the classes in microeco package depend on the R6 class. R6 uses the encapsulated object-oriented programming paradigm, which means that R6 is a profoundly different OO system from S3 and S4 because it is built on encapsulated objects, rather than generic functions. If you are interested in the class feature, read more from ‘Advanced R’ book. A generic is a regular function, so it lives in the global namespace. An R6 method belongs to an object so it lives in a local namespace. This influences how we think about naming. The methods belong to objects, not generics, and you call them like object$method(). R6’s reference semantics allow methods to simultaneously return a value and modify an object. Every R6 object has an S3 class that reflects its hierarchy of R6 class. "],["literature.html", "Chapter 3 Literature", " Chapter 3 Literature Here is a review of existing methods. "],["methods.html", "Chapter 4 Methods 4.1 math example", " Chapter 4 Methods We describe our methods in this chapter. Math can be added in body using usual syntax like this 4.1 math example \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt(\\frac{p(1-p)}{n}) \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\] You can also use math in footnotes like this1. We will approximate standard error to 0.0272 where we mention \\(p = \\frac{a}{b}\\)↩︎ \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt(\\frac{p(1-p)}{n}) \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\]↩︎ "],["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],["references.html", "References", " References "]]
