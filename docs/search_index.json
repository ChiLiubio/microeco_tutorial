[["other-examples-1.html", "Chapter 14 Other examples 14.1 Custom taxa order in bar plot 14.2 tidy_taxonomy function 14.3 Show the abundance of unknown taxa 14.4 Question of prefix in the taxa 14.5 The use of phylogenetic tree 14.6 trans_norm 14.7 Mantel test + Correlation heatmap 14.8 PCoA + boxplot 14.9 FAPROTAX + differential test 14.10 RDA results output 14.11 betaNRI/betaNTI for each group 14.12 Visualize taxonomic abundance with trans_alpha class", " Chapter 14 Other examples We’ve gathered a few tricks to make several issues easier to solve. We encourage users to contribute some unique, special or helpful examples inspired by the packages. 14.1 Custom taxa order in bar plot The flexibility of the package design can be reflected on many aspects. In some cases, it is possible to tactfully handle some particular challenges. For example, Dr.Jarrod contribute a cool answer to the question that how to use custom taxa and the order in bar plot by modifying the data inside the object. This is a discussion topic in microeco Discussions (https://github.com/ChiLiubio/microeco/discussions/45). 14.2 tidy_taxonomy function The taxonomic classification with standard prefix is very important for some analyses, e.g. taxonomic abundance plotting and biomarker finding. The tidy_taxonomy function in microeco package is designed to make the taxa having standard prefix. See those Issues with the detailed examples: (https://github.com/ChiLiubio/microeco/issues/32), (https://github.com/ChiLiubio/microeco/issues/22), (https://github.com/ChiLiubio/microeco/issues/231), (https://github.com/ChiLiubio/microeco/issues/254) and (https://github.com/ChiLiubio/microeco/issues/338). 14.3 Show the abundance of unknown taxa In the trans_abund class, the default operation can filter the unclassified taxa, such as those with ’g__’. Sometimes, these unknown taxa may be useful to represent uncultured species. Under the circumstance, the abundance of unknown taxa can be used to show the ratio of unknown taxa in the system. Please see the solution in this topic (https://github.com/ChiLiubio/microeco/issues/165). 14.4 Question of prefix in the taxa The prefix of taxa in taxonomic table may affect the following performance of plotting, e.g. text in legend. Please see those Issues (https://github.com/ChiLiubio/microeco/issues/32), (https://github.com/ChiLiubio/microeco/issues/7) and (https://github.com/ChiLiubio/microeco/issues/15). 14.5 The use of phylogenetic tree One of Issues referred to the basic use of phylogenetic tree in the microeco package (https://github.com/ChiLiubio/microeco/issues/33). 14.6 trans_norm The class trans_norm in microeco package (&gt;= 1.6.0) provides several data normalization or transformation approaches for the microtable object or data.frame object. The format of output is same with the input. For the details and references of the approaches, please refer to the help document of the class with the command ?trans_norm. library(microeco) data(dataset) t1 &lt;- trans_norm$new(dataset = dataset) # Geometric mean of pairwise ratios d1 &lt;- t1$norm(method = &quot;GMPR&quot;) # Centered log-ratio normalization d2 &lt;- t1$norm(method = &quot;clr&quot;) # Robust centered log-ratio normalization d2 &lt;- t1$norm(method = &quot;rclr&quot;) # d2 is another microtable object # Cumulative sum scaling normalization d2 &lt;- t1$norm(method = &quot;CSS&quot;) # Total sum scaling, dividing counts by the sequencing depth d2 &lt;- t1$norm(method = &quot;TSS&quot;) # log transformation d3 &lt;- t1$norm(method = &quot;log&quot;) 14.7 Mantel test + Correlation heatmap Sometimes, mantel test results and correlations of environmental factors are visualized together to deliver more information. In this example, we show how to extend the mantel test results from trans_env class with the package ggcor. Please install ggcor package according to the document (https://chiliubio.github.io/microeco_tutorial/intro.html#github-packages). # prepare data library(microeco) library(magrittr) data(dataset) data(env_data_16S) dataset$sample_table &lt;- data.frame(dataset$sample_table, env_data_16S[rownames(dataset$sample_table), ]) # extract two phyla to show the steps d1 &lt;- clone(dataset) d1$tax_table &lt;- d1$tax_table[d1$tax_table$Phylum == &quot;p__Proteobacteria&quot;, ] d1$tidy_dataset() d1$cal_betadiv() d2 &lt;- clone(dataset) d2$tax_table &lt;- d2$tax_table[d2$tax_table$Phylum == &quot;p__Bacteroidetes&quot;, ] d2$tidy_dataset() d2$cal_betadiv() # first perform mantel test t1 &lt;- trans_env$new(dataset = d1, env_cols = 8:15) t1$cal_mantel(use_measure = &quot;bray&quot;, partial_mantel = TRUE) t2 &lt;- trans_env$new(dataset = d2, env_cols = 8:15) t2$cal_mantel(use_measure = &quot;bray&quot;, partial_mantel = TRUE) # extract a part of the results x1 &lt;- data.frame(spec = &quot;Proteobacteria&quot;, t1$res_mantel) %&gt;% .[, c(1, 3, 6, 8)] x2 &lt;- data.frame(spec = &quot;Bacteroidetes&quot;, t2$res_mantel) %&gt;% .[, c(1, 3, 6, 8)] # rename columns colnames(x1) &lt;- colnames(x2) &lt;- c(&quot;spec&quot;, &quot;env&quot;, &quot;r&quot;, &quot;p.value&quot;) # generate interval data x1 %&lt;&gt;% dplyr::mutate(rd = cut(r, breaks = c(-Inf, 0.3, 0.6, Inf), labels = c(&quot;&lt; 0.3&quot;, &quot;0.3 - 0.6&quot;, &quot;&gt;= 0.6&quot;)), pd = cut(p.value, breaks = c(-Inf, 0.01, 0.05, Inf), labels = c(&quot;&lt; 0.01&quot;, &quot;0.01 - 0.05&quot;, &quot;&gt;= 0.05&quot;))) x2 %&lt;&gt;% dplyr::mutate(rd = cut(r, breaks = c(-Inf, 0.3, 0.6, Inf), labels = c(&quot;&lt; 0.3&quot;, &quot;0.3 - 0.6&quot;, &quot;&gt;= 0.6&quot;)), pd = cut(p.value, breaks = c(-Inf, 0.01, 0.05, Inf), labels = c(&quot;&lt; 0.01&quot;, &quot;0.01 - 0.05&quot;, &quot;&gt;= 0.05&quot;))) # cobine two tables plot_table &lt;- rbind(x1, x2) # install ggcor following the steps (https://chiliubio.github.io/microeco_tutorial/intro.html#github-packages) library(ggplot2) library(ggcor) set_scale() g1 &lt;- quickcor(t1$data_env, type = &quot;upper&quot;, cor.test = TRUE, show.diag = FALSE) + geom_square() + geom_mark(sig.thres = 0.05, markonly = TRUE, color = &quot;black&quot;, size = 6) + anno_link(aes(colour = pd, size = rd), data = plot_table) + scale_size_manual(values = c(0.5, 1.5, 3)) + scale_colour_manual(values = c(&quot;#D95F02&quot;, &quot;#1B9E77&quot;, &quot;#A2A2A288&quot;)) + guides(size = guide_legend(title = &quot;Mantel&#39;s r&quot;, override.aes = list(colour = &quot;grey35&quot;), order = 2), colour = guide_legend(title = &quot;Mantel&#39;s p&quot;, override.aes = list(size = 3), order = 1), fill = guide_colorbar(title = &quot;Pearson&#39;s r&quot;, order = 3)) g1 14.8 PCoA + boxplot In the sections involving trans_venn and trans_env classes, we mentioned some combination graphs generated based on the aplot package. Here, we continue to use the aplot and microeco packages to demonstrate how to add boxplots of coordinate scores to PCoA graphs. Similar combination graphs can be easily manipulated, so we no longer include this type of visualization in the plotting functions of ordination methods. Firstly, we use trans_beta class to compute PCoA, then perform differential test based on the cal_diff function in trans_env class. library(microeco) library(magrittr) library(ggplot2) library(aplot) theme_set(theme_bw()) data(dataset) # PCoA t1 &lt;- trans_beta$new(dataset = dataset, group = &quot;Group&quot;, measure = &quot;bray&quot;) t1$cal_ordination(method = &quot;PCoA&quot;) # extract the axis scores tmp &lt;- t1$res_ordination$scores # differential test with trans_env class t2 &lt;- trans_env$new(dataset = dataset, add_data = tmp[, 1:2]) # &#39;KW_dunn&#39; for non-parametric test t2$cal_diff(group = &quot;Group&quot;, method = &quot;anova&quot;) Then, employ the plotting functions in t1 and t2 objects for visualization. p1 &lt;- t1$plot_ordination(plot_color = &quot;Group&quot;, plot_shape = &quot;Group&quot;, plot_type = c(&quot;point&quot;, &quot;ellipse&quot;)) # groups order in p2 is same with p1; use legend.position = &quot;none&quot; to remove redundant legend p2 &lt;- t2$plot_diff(measure = &quot;PCo1&quot;, add_sig = T) + theme_bw() + coord_flip() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) p3 &lt;- t2$plot_diff(measure = &quot;PCo2&quot;, add_sig = T) + theme_bw() + theme(legend.position = &quot;none&quot;, axis.title.y = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()) # height of the upper figure and width of the right-hand figure are both 0.2-fold of the main figure g &lt;- p1 %&gt;% insert_top(p2, height = 0.2) %&gt;% insert_right(p3, width = 0.2) g At this point, we notice that the horizontal axis of the upper figure and the vertical axis of the right-hand figure do not correspond precisely with those of the main figure. Therefore, if we proceed with these graphs, the axis ticks of the upper and right-hand figures should be kept. If the user requires complete correspondence of the ticks, further control over the coordinate axes should be implemented. Here, we manually control the coordinate range. # use 1.4-fold of the scores as axis ranges x_lim &lt;- range(tmp[, 1]) * 1.4 y_lim &lt;- range(tmp[, 2]) * 1.4 # limit x and y axis without any extension p1 &lt;- p1 + scale_y_continuous(limits = y_lim, expand = c(0, 0)) + scale_x_continuous(limits = x_lim, expand = c(0, 0)) # limit x axis of upper figure (it&#39;s y axis when flipped) p2 &lt;- p2 + scale_y_continuous(limits = x_lim, expand = c(0, 0)) # limit y axis of right-hand figure p3 &lt;- p3 + scale_y_continuous(limits = y_lim, expand = c(0, 0)) g &lt;- p1 %&gt;% insert_top(p2, height = 0.2) %&gt;% insert_right(p3, width = 0.2) g Now, the ticks of the coordinate axes fully correspond, and we may selectively remove the ticks on the upper and right-hand figures. p2 &lt;- p2 + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) p3 &lt;- p3 + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) g &lt;- p1 %&gt;% insert_top(p2, height = 0.2) %&gt;% insert_right(p3, width = 0.2) g # save g to computer ggsave(&quot;test1.pdf&quot;, g, width = 7, height= 6) 14.9 FAPROTAX + differential test In the trans_func section, we showed an example of correlations between the abundances of OTUs with the traits from FAPROTAX database and environmental factors. Now, we go ahead and use trans_diff class to demonstrate the differential test of the abundances of OTUs with the traits across groups. library(microeco) data(dataset) t1 &lt;- trans_func$new(dataset) t1$cal_spe_func(prok_database = &quot;FAPROTAX&quot;) t1$cal_spe_func_perc(abundance_weighted = TRUE) # it is better to clone a dataset tmp_mt &lt;- clone(dataset) # transpose res_spe_func_perc to be a data.frame like taxonomic abundance tmp &lt;- as.data.frame(t(t1$res_spe_func_perc), check.names = FALSE) # assign the table back to taxa_abund list for further analysis tmp_mt$taxa_abund$func &lt;- tmp # select the &quot;func&quot; in taxa_abund list in trans_diff t2 &lt;- trans_diff$new(dataset = tmp_mt, method = &quot;anova&quot;, group = &quot;Group&quot;, taxa_level = &quot;func&quot;) t2$plot_diff_abund(add_sig = T) + ggplot2::ylab(&quot;Relative abundance (%)&quot;) 14.10 RDA results output In some analyses, it is often necessary to preserve intermediate files of various analysis results, and not all files are in the data.frame format. For example, in RDA analysis, the res_ordination_R2 generated by cal_ordination function is a numeric vector, and the res_ordination_envfit generated by the cal_ordination_envfit function is of envfit class. For those outputs, we can utilize the capture.output function to redirect the contents displayed in the dialogue box into a file. library(microeco) data(dataset) data(env_data_16S) t1 &lt;- trans_env$new(dataset = dataset, add_data = env_data_16S[, 4:11]) t1$cal_ordination(method = &quot;RDA&quot;, taxa_level = &quot;Genus&quot;) # get the significance of the terms t1$cal_ordination_anova() # fit factors onto the ordination to get R2 for each factor t1$cal_ordination_envfit() t1$trans_ordination(adjust_arrow_length = TRUE) g1 &lt;- t1$plot_ordination(plot_color = &quot;Group&quot;, plot_shape = &quot;Group&quot;) ggplot2::ggsave(&quot;RDA.pdf&quot;, g1, width = 8, height = 6.5) # use capture.output to save output capture.output(t1$res_ordination_R2, file = &quot;RDA_R2.txt&quot;) capture.output(t1$res_ordination_envfit, file = &quot;RDA_envfit.txt&quot;) # save data.frame objects write.table(t1$res_ordination_terms, &quot;RDA_anova_termsig.txt&quot;, sep = &quot;\\t&quot;) write.table(t1$res_ordination_axis, &quot;RDA_anova_axissig.txt&quot;, sep = &quot;\\t&quot;) write.table(t1$res_ordination_trans$df_sites, &quot;RDA_axis_sample.txt&quot;, sep = &quot;\\t&quot;) write.table(t1$res_ordination_trans$df_arrows, &quot;RDA_axis_term.txt&quot;, sep = &quot;\\t&quot;) write.table(t1$res_ordination_trans$df_arrows_spe, &quot;RDA_axis_taxa.txt&quot;, sep = &quot;\\t&quot;) 14.11 betaNRI/betaNTI for each group Sometimes, if you want to perform betaNRI/betaNTI for each group individually (one group is considered one species pool), you should calculate the index for each group, respectively. library(ggplot2) library(microeco) data(dataset) # we create a list to store the trans_nullmodel results. sesbeta_each &lt;- list() group_col &lt;- &quot;Group&quot; all_groups &lt;- unique(dataset$sample_table[, group_col]) # calculate for each group, respectively for(i in all_groups){ # like the above operation, but need provide &#39;group&#39; and &#39;select_group&#39; test &lt;- trans_nullmodel$new(dataset, group = group_col, select_group = i, filter_thres = 0.0005) test$cal_ses_betampd(runs = 500, abundance.weighted = TRUE) sesbeta_each[[i]] &lt;- test$res_ses_betampd } # merge and reshape to generate one symmetrical matrix test &lt;- lapply(sesbeta_each, reshape2::melt) %&gt;% do.call(rbind, .) %&gt;% reshape2::dcast(., Var1~Var2, value.var = &quot;value&quot;) rownames(test) &lt;- test[, 1] test &lt;- test[, -1, drop = FALSE] # like the above operation dataset$beta_diversity[[&quot;betaNRI&quot;]] &lt;- test t2 &lt;- trans_beta$new(dataset = dataset, group = &quot;Group&quot;, measure = &quot;betaNRI&quot;) t2$cal_group_distance() # statistical analysis t2$cal_group_distance_diff(method = &quot;wilcox&quot;) g1 &lt;- t2$plot_group_distance(boxplot_add = &quot;mean&quot;) g1 + geom_hline(yintercept = -2, linetype = 2) + geom_hline(yintercept = 2, linetype = 2) 14.12 Visualize taxonomic abundance with trans_alpha class When it is necessary to perform differential analysis and visualization between groups within different categories, the trans_diff class currently struggles to achieve this for multiple taxa. At this time, we can use the trans_alpha class to analyze each taxon and merge the figures into one. library(microeco) library(magrittr) library(mecoturn) data(&quot;wheat_16S&quot;) # first clone the data d1 &lt;- clone(wheat_16S) # tidy the abundance table and view it as alpha diversity d1$alpha_diversity &lt;- d1$taxa_abund$Genus %&gt;% .[!grepl(&quot;__$&quot;, rownames(.), ignore.case = TRUE), ] %&gt;% t %&gt;% as.data.frame # extract a part of taxa as an example d1$alpha_diversity %&lt;&gt;% .[, 1:10] # simplify the taxa names colnames(d1$alpha_diversity) %&lt;&gt;% gsub(&quot;.*g__&quot;, &quot;&quot;, .) t1 &lt;- trans_alpha$new(d1, group = &quot;Type&quot;, by_group = &quot;Region&quot;) t1$cal_diff(method = &quot;anova&quot;) t1$plot_alpha(measure = &quot;Pseudomonas&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
