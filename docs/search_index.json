[["index.html", "microeco tutorial Chapter 1 Background", " microeco tutorial Chi Liu, Minjie Yao 2021-07-27 Chapter 1 Background R language (R Core Team 2016) and its packages ecosystem are wonderful tools for data analysis. In microbial community ecology field, many packages can be used for the data analysis, such as vegan(Oksanen et al. 2019), ape(Paradis and Schliep 2018) and picante(Kembel et al. 2010). However, with the development of the high-throughput sequencing techniques, the increasing data amount and complexity make the data analysis a challenge. There have been some R packages created for the community data analysis in microbial ecology, such as phyloseq(Mcmurdie and Holmes 2013), microbiome (https://github.com/microbiome/microbiome), microbiomeSeq (http://www.github.com/umerijaz/microbiomeSeq), ampvis2 (https://madsalbertsen.github.io/ampvis2/reference/index.html), MicrobiomeR(https://github.com/vallenderlab/MicrobiomeR), theseus(Price et al. 2018), rANOMALY(Theil and Rifa 2021) and so on. However, we lack a flexible, comprehensive and modularized R package to analyze and manage the data. So we create the microeco R package(Liu et al. 2021) for this goal (https://github.com/ChiLiubio/microeco). References "],["intro.html", "Chapter 2 Introduction 2.1 Main Features 2.2 R6 Class 2.3 Help", " Chapter 2 Introduction The microeco package has several advantages compared to other packages in R. The main goal of developing this package is to help users analyse communtiy ecology data fast. So a series of commonly-used approaches are implemented. Some new methods are in active development. To accelerate the data mining, the whole structure of microeco package are modularized to make users conveniently remember, search and use. 2.1 Main Features R6 Class; fast, flexible and modularized Taxa abundance plotting Venn diagram Alpha diversity Beta diversity Differential abundance analysis Environmental data analysis Null model analysis Network analysis Functional analysis 2.2 R6 Class All the classes in microeco package depend on the R6 class (Chang 2020). R6 uses the encapsulated object-oriented programming paradigm, which means that R6 is a profoundly different OO system from S3 and S4 because it is built on encapsulated objects, rather than generic functions. If you are interested in the class feature, read more from ‘Advanced R’ book. A generic is a regular function, so it lives in the global namespace. An R6 method belongs to an object so it lives in a local namespace. This influences how we think about naming. The methods belong to objects, not generics, and you call them like object$method(). R6’s reference semantics allow methods to simultaneously return a value and modify an object. Every R6 object has an S3 class that reflects its hierarchy of R6 class. 2.3 Help The use of help documents in the microeco package may be a little different from other packages we often used. If you wish to see one of help documents of functions, you should search the name of the class (not the name of the function) and click the link of the function. # first install microeco, see https://github.com/ChiLiubio/microeco # load package microeco library(microeco) # this can show all the functions and the detailed descriptions in the microtable class ?microtable References "],["basic-class.html", "Chapter 3 basic class 3.1 microtable", " Chapter 3 basic class 3.1 microtable Many tools can be used for the bioinformatic analysis, such as QIIME(Caporaso et al. 2010), usearch(https://www.drive5.com/usearch/), mothur(Schloss et al. 2009), and RDP(http://rdp.cme.msu.edu/). Although the format of results may be different from various tools, the main files can be classified into the following parts: (1) OTU or ASV table, i.e. the species-sample abundance table; (2) taxonomy table, the taxonomy assignments information table; (3) phylogenetic tree; (4) representative sequences. (5) Generally, it is useful to create a detailed sample information table to store all the sample information, including the environmental data and the missing values (NA). The microtable class is the basic class and designed to store the basic data for all the downstream analysis in the microeco package. At least, the OTU table (i.e. species-sample abundance table) should be provided to create microtable object. Thus, the microtable class can recognize the sample information table is missing and create a default sample table according to the sample names of otu_table. To make the file reading more convenient, we also build another R package file2meco (https://github.com/ChiLiubio/file2meco) to read the output files of some tools into microtable object. Currently, those tools/softwares include not only commonly-used QIIME (Caporaso et al. 2010) and QIIME2(Bolyen et al. 2019), but also some metagenomic tools, such as HUMAnN (Franzosa et al. 2018). In this tutorial, we use the data inside the package microeco to show some operations. The 16S rRNA sequencing results in the example data of the package is used to show the main part of the tutorial. This dataset is the 16S rRNA gene Miseq sequencing results of wetland soils in China published by An et al.(An et al. 2019), who surveyed soil bacterial communities in Chinese inland wetlands (IW), coastal wetland (CW) and Tibet plateau wetlands (TW) using 16S rRNA gene amplicon sequencing method. These wetlands include both saline and non-saline samples. The sample information table have 4 columns: “SampleID,” “Group,” “Type” and “Saline.” The column “SampleID” is same with the rownames. The column “Group” represents the IW, CW and TW. The column “Type” represents the sampling region: northeastern region (NE), northwest region (NW), North China area (NC), middle-lower reaches of the Yangtze River (YML), southern coastal area (SC), upper reaches of the Yangtze River (YU), Qinghai-Tibet Plateau (QTP). The column “Saline” represents the saline soils and non-saline soils. In this dataset, the environmental factor table is separated from the sample information table. Another ITS sequencing dataset is also stored in the example data of the package(Gao et al. 2019). library(microeco) # load the example data; 16S rRNA gene amplicon sequencing dataset data(sample_info_16S) data(otu_table_16S) data(taxonomy_table_16S) data(phylo_tree_16S) # load the environmental data which is detached from sample table data(env_data_16S) # use pipe operator in magrittr package library(magrittr) # set.seed is used to fix the random number generation to make the results repeatable set.seed(123) # make the plotting background same with the tutorial library(ggplot2) theme_set(theme_bw()) Make sure that the data types of sample_table, otu_table and tax_table are all data.frame as the following part shows. class(otu_table_16S) ## [1] &quot;data.frame&quot; otu_table_16S[1:5, 1:5]   S1 S2 S3 S4 S5 OTU_4272 1 0 1 1 0 OTU_236 1 4 0 2 35 OTU_399 9 2 2 4 4 OTU_1556 5 18 7 3 2 OTU_32 83 9 19 8 102 class(taxonomy_table_16S) ## [1] &quot;data.frame&quot; taxonomy_table_16S[1:5, 1:3]   Kingdom Phylum Class OTU_4272 k__Bacteria p__Firmicutes c__Bacilli OTU_236 k__Bacteria p__Chloroflexi c__ OTU_399 k__Bacteria p__Proteobacteria c__Betaproteobacteria OTU_1556 k__Bacteria p__Acidobacteria c__Acidobacteria OTU_32 k__Archaea p__Miscellaneous Crenarchaeotic Group c__ Sometimes, your taxonomic table may have some chaotic information, such NA, unidentified and unknown. These information can influence the following taxonomic abundance calculation. So it is necessary to clean this file using the following code. Another important part of this operation is to unify the taxonomic prefix, e.g. transforming D_1__ to p__ for phylum level. # make the taxonomic information unified, important taxonomy_table_16S %&lt;&gt;% tidy_taxonomy class(sample_info_16S) ## [1] &quot;data.frame&quot; sample_info_16S[1:5, ]   SampleID Group Type Saline S1 S1 IW NE Non-saline soil S2 S2 IW NE Non-saline soil S3 S3 IW NE Non-saline soil S4 S4 IW NE Non-saline soil S5 S5 IW NE Non-saline soil class(env_data_16S) ## [1] &quot;data.frame&quot;   Latitude Longitude Altitude Temperature Precipitation S1 52.96 122.6 432 -4.2 445 S2 52.95 122.6 445 -4.3 449 S3 52.95 122.6 430 -4.3 449 S4 52.95 122.6 430 -4.3 449 S5 52.95 122.6 429 -4.3 449 class(phylo_tree_16S) ## [1] &quot;phylo&quot; Then, we create an object of microtable class. This operation is very similar with the package phyloseq(Mcmurdie and Holmes 2013), but microeco is more brief and simpler. The otu_table in the microtable class must be the species-sample format: rownames must be OTU names, colnames must be sample names. The required sample names must be same in rownames of sample_table and colnames of otu_table. # In R6 class, &#39;$new&#39; is the original method used to create a new object of class dataset &lt;- microtable$new(sample_table = sample_info_16S, otu_table = otu_table_16S, tax_table = taxonomy_table_16S, phylo_tree = phylo_tree_16S) class(dataset) ## [1] &quot;microtable&quot; &quot;R6&quot; print(dataset) ## microtable class: ## sample_table have 90 rows and 4 columns ## otu_table have 13628 rows and 90 columns ## tax_table have 13628 rows and 7 columns ## phylo_tree have 14096 tips To make the species and sample information consistent across different files in the dataset object, we can use function tidy_dataset() to trim the dataset. dataset$tidy_dataset() print(dataset) ## microtable class: ## sample_table have 90 rows and 4 columns ## otu_table have 13628 rows and 90 columns ## tax_table have 13628 rows and 7 columns ## phylo_tree have 13628 tips Then, we remove OTUs which are not assigned in the Kingdom \"k__Archaea\" or \"k__Bacteria\". dataset$tax_table %&lt;&gt;% base::subset(Kingdom == &quot;k__Archaea&quot; | Kingdom == &quot;k__Bacteria&quot;) print(dataset) ## microtable class: ## sample_table have 90 rows and 4 columns ## otu_table have 13628 rows and 90 columns ## tax_table have 13330 rows and 7 columns ## phylo_tree have 13628 tips We also remove OTUs with the taxonomic assignments “mitochondria” or “chloroplast.” # This will remove the lines containing the taxa word regardless of taxonomic ranks and ignoring word case in the tax_table. # So if you want to filter some taxa not considerd pollutions, please use subset like the previous operation. dataset$filter_pollution(taxa = c(&quot;mitochondria&quot;, &quot;chloroplast&quot;)) ## Total 34 taxa are removed! print(dataset) ## microtable class: ## sample_table have 90 rows and 4 columns ## otu_table have 13628 rows and 90 columns ## tax_table have 13296 rows and 7 columns ## phylo_tree have 13628 tips Then, to make the OTUs same in otu_table, tax_table and phylo_tree, we use tidy_dataset() again. dataset$tidy_dataset() print(dataset) ## microtable class: ## sample_table have 90 rows and 4 columns ## otu_table have 13296 rows and 90 columns ## tax_table have 13296 rows and 7 columns ## phylo_tree have 13296 tips Then we use sample_sums() to check the sequence numbers in each sample. dataset$sample_sums() %&gt;% range ## [1] 10316 37087 Sometimes, in order to reduce the effects of sequencing depth on the diversity measurements, we need to perform the resampling to make the sequence number equal for each sample. The function rarefy_samples can invoke the function tidy_dataset automatically before and after the rarefying. # As an example, we use 10000 sequences in each sample dataset$rarefy_samples(sample.size = 10000) ## 530 OTUs were removed because they are no longer present in any sample after random subsampling dataset$sample_sums() %&gt;% range ## [1] 10000 10000 Then, we calculate the taxa abundance at each taxonomic rank using cal_abund(). This function return a list called taxa_abund containing several data frame of the abundance information at each taxonomic rank. The list is stored in the microtable object automatically. It’s worth noting that the cal_abund() function can be used to solve some complex cases, such as supporting both the relative and absolute abundance calculation and selecting the partial taxonomic columns. Those have been shown in README of file2meco package (https://github.com/ChiLiubio/file2meco). dataset$cal_abund() ## The result is stored in object$taxa_abund # return dataset$taxa_abund class(dataset$taxa_abund) ## [1] &quot;list&quot; If you want to save the taxa abundance file to a local place, use save_abund(). dir.create(&quot;taxa_abund&quot;) dataset$save_abund(dirpath = &quot;taxa_abund&quot;) Then, let’s calculate the alpha diversity. The result is also stored in the object microtable automatically. As an example, we do not calculate phylogenetic diversity. # If you want to add Faith&#39;s phylogenetic diversity, use PD = TRUE, this will be a little slow dataset$cal_alphadiv(PD = FALSE) ## The result is stored in object$alpha_diversity. # return dataset$alpha_diversity class(dataset$alpha_diversity) ## [1] &quot;data.frame&quot; # save dataset$alpha_diversity to a directory dir.create(&quot;alpha_diversity&quot;) ## Warning in dir.create(&quot;alpha_diversity&quot;): &#39;alpha_diversity&#39;已存在 dataset$save_alphadiv(dirpath = &quot;alpha_diversity&quot;) We also calculate the distance matrix of beta diversity using function cal_betadiv(). We provide four most frequently used indexes: Bray-curtis, Jaccard, weighted Unifrac and unweighted unifrac. ## The result is stored in object$beta_diversity. # If you do not want to calculate unifrac metrics, use unifrac = FALSE # require GUniFrac package dataset$cal_betadiv(unifrac = TRUE) # return dataset$beta_diversity class(dataset$beta_diversity) # save dataset$beta_diversity to a directory dir.create(&quot;beta_diversity&quot;) dataset$save_betadiv(dirpath = &quot;beta_diversity&quot;) References "],["methods.html", "Chapter 4 Methods 4.1 math example", " Chapter 4 Methods We describe our methods in this chapter. Math can be added in body using usual syntax like this 4.1 math example \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt(\\frac{p(1-p)}{n}) \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\] You can also use math in footnotes like this1. We will approximate standard error to 0.0272 where we mention \\(p = \\frac{a}{b}\\)↩︎ \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt(\\frac{p(1-p)}{n}) \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\]↩︎ "],["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],["references.html", "References", " References "]]
